


@Async
Async 기능 백그라운드에서 동작하는 thread pool에게 메서드 실행 하는 작업을 위임한다
별도의 스레드에서 호출한다
nonblocking 으로 하기 위해서 future
future blocking 되지 않음 but get을 호출시 blocking이 된다
listenable future, call back 사용 가능

test시 문제점
hibernate는 data를 캐시하고 있다가 조회를 할 때 sink를 맞추기 위해 flushing을 한다(insert 쿼리 보낸다)
spring의 transactional 특성상 roll back이며 test시 spring default는 roll back이다.
따라서 roll back이기 때문에 hibernate은 commit을 하지 않는다.
또한 aysnc는 다른 쓰레드 풀에서 돌아가기 때문에 hibernate는 이후 작업을 알 수 없다.
또한 aysnc 콜백 하기 전에 main 쓰레드가 끝났으므로 결과가 안나온다
+ 트랜잭션 안에 트랜잭션으로 또다른 쓰레드로 async하게 만들었다. 트렌잭션 이전의 data는 조작할 수 있지만, 기존의 thread에서
조작하는 데이터는 새로운 thread에서 감지하지 못한다

applicaiton의 대부분의 성능 문제는 db쪽에서 발생한다 병목현상이 생긴다.
성능 최적화 하기 위해서는 sql 쿼리 갯수를 줄이고 필요한 데이터를 필요한 만큼만 가져오는 것
