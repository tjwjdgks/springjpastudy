스프링 데이터   : SQL & NoSQL 저장소 지원 프로젝트의 묶음.
스프링 데이터 Common : 여러 저장소 지원 프로젝트의 공통 기능 제공.
스프링 데이터 REST : 저장소의 데이터를 하이퍼미디어 기반 HTTP 리소스로(REST API로) 제공하는 프로젝트.
스프링 데이터 JPA : 스프링 데이터 Common이 제공하는 기능에 JPA 관련 기능 추가.

스프링 데이터 Common
    - repository
        Repository 마커 인터페이스
        CrudRepository 기능을 정의한 인터페이스
        PagingAndSortingRepository
    - null 처리하기
        @Nullable @NonNull 가능
        파라미터 또는 메소드에 붙임
    - query 만들기
        메소드 이름보고 메소드 이름 분석해서 query 만들기
        미리 정의된 쿼리 찾아 사용하기 기본 jpql, native query 사용하고 싶다면 navtiveQuery 사용 true

        쿼리 만드는 방법
            리턴타입 {접두어}{도입부}By{프로퍼티 표현식}(조건식)[(And|Or){프로퍼티 표현식}(조건식)]{정렬 조건} (매개변수)

    - 커스텀 리포지토리
        쿼리 메소드(쿼리 생성과 쿼리 찾아쓰기)로 해결이 되지 않는 경우 직접 코딩으로 구현 가능.
        스프링 데이터 리포지토리 인터페이스에 기능 추가.
        스프링 데이터 리포지토리 기본 기능 덮어쓰기 가능.

        구현 방법
            커스텀 리포지토리 인터페이스 정의
            인터페이스 구현 클래스 만들기 (기본 접미어는 Impl)
            엔티티 리포지토리에 커스텀 리포지토리 인터페이스 추가

    - 기본 리포지토리 커스터 마이징
        모든 리포지토리에 공통적으로 추가하고 싶은 기능이 있거나 덮어쓰고 싶은 기본 기능이 있다면
            JpaRepository를 상속 받는 인터페이스 정의
                @NoRepositoryBean
            기본 구현체를 상속 받는 커스텀 구현체 만들기
            @EnableJpaRepositories에 설정
                    repositoryBaseClass
    - 도메인 이벤트
        도메인 관련 이벤트 발생 시키기
            스프링 프레임워크의 이벤트 관련 기능
            https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#context-functionality-events
        도메인 클래스의 변화를 이벤트로 발생 시킨다 -> 이벤트를 이벤트 리스너가 변화를 감지한다. 이벤트 기반의 프로그래밍 가능
        applicaiton context가 이벤트 publisher이다
        extends AbstractAggregateRoot<E> 로 가능

        스피링 데이터 이벤트 자동 publishing 기능 제공
            엔티티에 쌓여 있는 이벤트를 save하는 순간 모두 보내준다
            @DomainEvents 이벤트를 모아 놓은 곳
            @AfterDomainEventPublication 이벤트 비워주는 메소드
    - 웹 지원 기능
        도메인 클래스 컨버터
        @RequestHandler 메소드에서 Pageable과 Sort 매개변수 사용
            Page 관련 HATEOAS 기능 제공
                PagedResourcesAssembler
                PagedResoure
        Payload 프로젝션
            요청으로 들어오는 데이터 중 일부만 바인딩 받아오기
            @ProjectedPayload, @XBRead, @JsonPath
        요청 쿼리 매개변수를 QueryDSLdml Predicate로 받아오기
            ?firstname=Mr&lastname=White => Predicate


스프링 데이터 jpa
    - repository
        @EnableJpaRepositories
            스프링 부트 사용할 때는 사용하지 않아도 자동 설정 됨.
            스프링 부트 사용하지 않을 때는 @Configuration과 같이 사용.

        스프링 @Repository 붙였을 경우
            SQLExcpetion 또는 JPA 관련 예외를 스프링의 DataAccessException으로 변환 해준다. debugging 쉽게 해줄 수 있음
            but hibernate에서도 대부분을 지원해주므로 굳이..? 쓸려면 쓸수도 있음

    - 엔티티 저장하기
        // @SpringBootTest 와 슬라이싱 test 사용이유
        // 슬라이싱 test에서 entity manager는 @Test안에 트랜잭션 으로 묶여 있음
        // but @SBT는 entity manager 트랜잭션 밖에 있음
        // hibernate Managed 내가 명시적으로 객체의 변경을 알려주지 않아도 jpa와 hibernate가 객체의 변경을 감지해서 필요한 시점에 변경해줌
        RETURN 받은 인스턴스를 사용해라!

        JpaRepository의 save()는 단순히 새 엔티티를 추가하는 메소드가 x
            Transient 상태의 객체라면 EntityManager.persist()
            Detached 상태의 객체라면 EntityManager.merge()

            save는 update용도로도 쓸수 있다

        Transient인지 Detached 인지 어떻게 판단 하는가?
            엔티티의 @Id 프로퍼티를 찾는다. 해당 프로퍼티가 null이면 Transient 상태로 판단하고 id가 null이 아니면 Detached 상태로 판단한다.
            엔티티가 Persistable 인터페이스를 구현하고 있다면 isNew() 메소드에 위임한다.
            JpaRepositoryFactory를 상속받는 클래스를 만들고 getEntityInfomration()을 오버라이딩해서 자신이 원하는 판단 로직을 구현할 수도 있음.

            EntityManager.persist()
                https://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html#persist(java.lang.Object)
                Persist() 메소드에 넘긴 그 엔티티 객체를 Persistent 상태로 변경합니다.

            EntityManager.merge()
                https://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html#merge(java.lang.Object)
                Merge() 메소드에 넘긴 그 엔티티의 복사본을 만들고, 그 복사본을 다시 Persistent 상태로 변경하고 그 복사본을 반환합니다.
    - 쿼리 메소드
        쿼리 생성하기
            https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation
            And, Or
            Is, Equals
            LessThan, LessThanEqual, GreaterThan, GreaterThanEqual
            After, Before
            IsNull, IsNotNull, NotNull
            Like, NotLike
            StartingWith, EndingWith, Containing
            OrderBy
            Not, In, NotIn
            True, False
            IgnoreCase

        -쿼리 메소드 Sort
            pageable이나 sort 매개변수 사용가능 @Query와 같이 사용할 때 제약 사항
                Order by 절에서 함수 호출 하는 경우 sort 사용 못함, 그 경우 JpaSort.unsafe() 사용
                Sort는 그 안에 프로퍼티 또는 ailas가 엔티티에 없는 경우 예외 발생
                JpaSort.unsafe()를 사용하면 함수 호출 가능

    - EntityGraph
        쿼리 메소드 마다 연관 관계의 Fetch 모드를 설정 할 수 있다

        @NamedEntityGraph
            @Entity에서 재사용할 여러 엔티티 그룹을 정의할 때 사용.

        @NamedEntityGraph에 정의되어 있는 엔티티 그룹을 사용 함.
            그래프 타입 설정 가능
                (기본값) FETCH: 설정한 엔티티 애트리뷰트는 EAGER 패치 나머지는 LAZY 패치.
                LOAD: 설정한 엔티티 애트리뷰트는 EAGER 패치 나머지는 기본 패치 전략 따름.

    - projection
        엔티티의 일부 데이터만 가져오기. entity 속성이 너무 많을 때 일부만 관심이 있을 때 사용
        둘다 Closed와 Open 프로젝션을 나눌 수 있음
        인터페이스 기반 프로젝션
            Nested 프로젝션 가능.
            Closed 프로젝션
                쿼리를 최적화 할 수 있다. 가져오려는 애트리뷰트가 뭔지 알고 있으니까.
                Java 8의 디폴트 메소드를 사용해서 연산을 할 수 있다.
            Open 프로젝션
                @Value(SpEL)을 사용해서 연산을 할 수 있다. 스프링 빈의 메소드도 호출 가능.
                쿼리 최적화를 할 수 없다. SpEL을 엔티티 대상으로 사용하기 때문에.
        클래스 기반 프로젝션
            DTO
            롬복 @Value로 코드 줄일 수 있음

    -Specifications
        에릭 에반스의 책 DDD에서 언급하는 Specification 개념을 차용 한 것으로 QueryDSL의 Predicate와 비슷하다
        https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/
        조건절을 스펙으로 정의 가능, 스펙끼리 조합 가능
        typesafe query 제공 라이브러리 보통 entity 기반 code generation을 해서 관련 프로퍼티 type safe하게 사용 가능하게 한다
        패키징 할 때 maven 플러그인 설정 해야 되는 경우 도 있음
            관련 plugin
            <plugin>
                <groupId>org.bsc.maven</groupId>
                <artifactId>maven-processor-plugin</artifactId>
                <version>2.0.5</version>
                <executions>
                    <execution>
                        <id>process</id>
                        <goals>
                                <goal>process</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <configuration>
                            <processors>
                                <processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
                            </processors>
                         </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.hibernate</groupId>
                        <artifactId>hibernate-jpamodelgen</artifactId>
                        <version>${hibernate.version}</version>
                    </dependency>
                </dependencies>
            </plugin>


